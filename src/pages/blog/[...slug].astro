---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import ShareButtons from '../../components/ShareButtons.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map(post => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Generate meta description from post description
const metaDescription = post.data.description;

// Generate keywords from tags and category
const keywords = [...post.data.tags, post.data.category].join(', ').toLowerCase();

// Format date for schema
const formattedDate = post.data.pubDate.toISOString();

// Article schema for structured data
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": post.data.title,
  "description": post.data.description,
  "author": {
    "@type": "Person",
    "name": post.data.author
  },
  "datePublished": formattedDate,
  "dateModified": formattedDate,
  "publisher": {
    "@type": "Organization",
    "name": "Dev Elevate",
    "logo": {
      "@type": "ImageObject",
      "url": "https://develevate.tech/logo.png"
    }
  },
  "keywords": post.data.tags.join(", "),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://develevate.tech/blog/${post.slug}`
  }
};

// Get the full URL for sharing
const postUrl = new URL(`/blog/${post.slug}`, Astro.site).toString();
---

<Layout title={`${post.data.title} - Dev Elevate`}>
  <!-- SEO Meta Tags -->
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" name="keywords" content={keywords} />
  
  <!-- Open Graph Tags -->
  <meta slot="head" property="og:title" content={post.data.title} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="article" />
  <meta slot="head" property="og:url" content={postUrl} />
  
  <!-- Twitter Card Tags -->
  <meta slot="head" name="twitter:card" content="summary_large_image" />
  <meta slot="head" name="twitter:title" content={post.data.title} />
  <meta slot="head" name="twitter:description" content={metaDescription} />
  
  <!-- Article Schema -->
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)} />

  <article class="max-w-4xl mx-auto px-4 py-12">
    <header class="text-center mb-12">
      <div class="mb-4">
        <span class="inline-block bg-purple-100 text-purple-600 px-3 py-1 rounded-full text-sm font-semibold">
          {post.data.category}
        </span>
      </div>
      <h1 class="text-4xl font-bold text-gray-900 mb-4">{post.data.title}</h1>
      <p class="text-xl text-gray-600 mb-6">{post.data.description}</p>
      <div class="flex justify-center items-center space-x-4 text-gray-600">
        <span class="flex items-center">
          <i class="ri-user-line mr-2"></i>
          {post.data.author}
        </span>
        <span>â€¢</span>
        <time datetime={post.data.pubDate.toISOString()} class="flex items-center">
          <i class="ri-calendar-line mr-2"></i>
          {post.data.pubDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      </div>
      <div class="mt-6 flex flex-wrap justify-center gap-2">
        {post.data.tags.map((tag: string) => (
          <span class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
            #{tag}
          </span>
        ))}
      </div>
    </header>
    
    <!-- Share Buttons (Top) -->
    <div class="mb-8">
      <ShareButtons
        title={post.data.title}
        url={postUrl}
        description={post.data.description}
      />
    </div>
    
    <div class="prose lg:prose-xl mx-auto">
      <Content />
    </div>
    
    <!-- Share Buttons (Bottom) -->
    <div class="mt-12">
      <ShareButtons
        title={post.data.title}
        url={postUrl}
        description={post.data.description}
      />
    </div>
  </article>
</Layout>